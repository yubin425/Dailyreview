import SwiftUI
import SwiftData

@Model
class CustomField: ObservableObject, Identifiable {
    var id: UUID = UUID()
    var name: String
    var value: String
    
    init(name: String, value: String) {
        self.name = name
        self.value = value
    }
}

@Model
class Review: ObservableObject {
    var id: UUID = UUID()
    var movieTitle: String
    var moviePoster: String  // ÏòÅÌôî Ìè¨Ïä§ÌÑ∞ Ïù¥ÎØ∏ÏßÄ Ïù¥Î¶Ñ
    var reviewText: String
    var rating: Int
    var watchDate: Date
    var watchLocation: String
    var friends: String
    var customFields: [CustomField] = [] // ÏÇ¨Ïö©Ïûê Ï†ïÏùò ÌïÑÎìúÎì§
    
    init(movieTitle: String, moviePoster: String, reviewText: String, rating: Int, watchDate: Date, watchLocation: String, friends: String, customFields: [CustomField]) {
        self.movieTitle = movieTitle
        self.moviePoster = moviePoster
        self.reviewText = reviewText
        self.rating = rating
        self.watchDate = watchDate
        self.watchLocation = watchLocation
        self.friends = friends
        self.customFields = customFields
    }
}

struct ReviewView: View {
    @Environment(\.modelContext) private var modelContext
    @State private var movieTitle = ""
    @State private var moviePoster = ""
    @State private var reviewText = ""
    @State private var rating = 1
    @State private var watchDate = Date()
    @State private var watchLocation = ""
    @State private var friends = ""
    
    @State private var customFields: [CustomField] = []
    @State private var newFieldName: String = ""
    private func addCustomField() {
        guard !newFieldName.isEmpty else { return }
        customFields.append(CustomField(name: newFieldName, value: ""))
        newFieldName = ""
    }
    private func resetCustomFields() {
        customFields.removeAll()
    }
    
    @State private var showReviewField = false // Î¶¨Î∑∞ ÏûÖÎ†•Ï∞Ω ÌëúÏãú Ïó¨Î∂Ä
    
    let movie: Movie  // DetailViewÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ ÏòÅÌôî Ï†ïÎ≥¥
    private var Tags: String {
        let genreTags = movie.genre.prefix(2).map { "#\($0)" }
        let keywordTag = movie.keyword.prefix(1).map { "#\($0)" }
        return (genreTags + keywordTag).joined(separator: " ")
    }

 
    var body: some View {
       //ScrollView {
            GeometryReader { geometry in
                VStack {
                    Image("testImage")
                        .resizable()
                        .aspectRatio(contentMode: .fill)
                        .frame(width: geometry.size.width, height: 300)
                        .clipped()
                        .overlay(Color.white.opacity(0.7))
                        .overlay(
                            VStack(alignment:.center){
                                HStack{ //Ïù¥ÎØ∏ÏßÄ + Î≥ÑÏ†êÍ≥º ÌÖçÏä§Ìä∏ hstack
                                    Image("testImage")
                                        .resizable()
                                        .aspectRatio(contentMode: .fit)
                                        .frame(width: 150)
                                        .padding(.horizontal)
                                    Spacer()
                                    
                                    VStack {
                                        Text("\(movie.title)")
                                            .font(.title)
                                            .foregroundColor(.black)
                                            .multilineTextAlignment(.center)
                                            .padding(.bottom, 5)
                                        Text("\(String(movie.director.first ?? "null")),\(String(movie.releaseYear ?? "null"))")
                                        Text("\(String(movie.plotText ?? "null"))")
                                            .multilineTextAlignment(.center)
                                        
                                        HStack {
                                            ForEach(1...5, id: \.self) { index in
                                                Image(systemName: index <= rating ? "star.fill" : "star")
                                                    .resizable()
                                                    .frame(width: 30, height: 30)
                                                    .foregroundColor(index <= rating ? .orange : .black)
                                                    .onTapGesture {
                                                        rating = index
                                                    }
                                            }
                                        } //Ïó¨Í∏∞ÍπåÏßÄ Î≥ÑÏ†ê Hstack
                                    } //Ïó¨Í∏∞ÍπåÏßÄ Î≥ÑÏ†ê&ÌÖçÏä§Ìä∏ vstack
                                    .padding(.horizontal)
                                }//Ïó¨Í∏∞ÍπåÏßÄ Ìè¨Ïä§ÌÑ∞Í∞Ä ÏÜçÌïú hstack
                                
                                HStack {
                                    Text("Ï∂úÏó∞Ïûê:\(String(movie.director.first ?? "null"))")
                                        .lineLimit(1)
                                        .truncationMode(.tail)
                                    
                                    Spacer()
                                    
                                    Text(Tags)
                                        .lineLimit(1)
                                        .truncationMode(.tail)
                                } //Ïó¨Í∏∞ÍπåÏßÄ hstack
                                .padding(.horizontal)
                                .padding(.top, 5)
                                
                            }
                        )//overlay ÎÅùÎÇòÎäî Í≥≥
                }//vstack
            }//geometry
            .background(Color.white.opacity(0.3))
            .padding(.vertical)
            .frame(height: 300)
            VStack {
                    // Í∏∞Î≥∏ ÌïÑÎìú
                List {
                    Section(header: Text("Í∏∞Î≥∏ Ï†ïÎ≥¥")) {
                        // ÎÇ†Ïßú ÏûÖÎ†•ÎûÄ
                        HStack {
                            Text("üìÖ ÎÇ†Ïßú")
                            DatePicker("", selection: $watchDate, displayedComponents: .date)
                                .labelsHidden()
                        }
                            
                        // ÏúÑÏπò ÏûÖÎ†•ÎûÄ
                        HStack {
                            Text("üìç ÏúÑÏπò")
                            TextField("ÏòÅÌôîÎ•º Î≥∏ ÏúÑÏπò", text: $watchLocation)
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                        }
                            
                        // ÏπúÍµ¨ ÏûÖÎ†•ÎûÄ
                        HStack {
                            Text("üë• Í∞ôÏù¥ Î≥∏ ÏÇ¨Îûå")
                            TextField("ÏòÅÌôîÎ•º Í∞ôÏù¥ Î≥∏ ÏπúÍµ¨", text: $friends)
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                        }
                    }
                        
                    // Ïª§Ïä§ÌÖÄ ÌïÑÎìú
                    Section(header: Text("Ïª§Ïä§ÌÖÄ ÌïÑÎìú")) {
                        ForEach($customFields) { $field in
                            HStack {
                                TextField("ÌïÑÎìú Ïù¥Î¶Ñ", text: $field.name)
                                Divider()
                                TextField("Í∞íÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî", text: $field.value)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                }
                            }
                            .onDelete { indexSet in
                            customFields.remove(atOffsets: indexSet)
                            }
                            
                            // ÏÉàÎ°úÏö¥ ÌïÑÎìú Ï∂îÍ∞Ä
                        HStack {
                            TextField("ÏÉà ÌïÑÎìú Ïù¥Î¶Ñ ÏûÖÎ†•", text: $newFieldName)
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                            Button("Ï∂îÍ∞Ä") {
                                addCustomField()
                            }
                        }
                        // Ïª§Ïä§ÌÖÄ ÌïÑÎìú Î¶¨ÏÖã Î≤ÑÌäº
                        Button("Î™®Îì† Ïª§Ïä§ÌÖÄ ÌïÑÎìú Î¶¨ÏÖã") {
                            resetCustomFields()
                        }
                        .foregroundColor(.red)
                    }
                }
                .frame(maxWidth: .infinity)
                .padding()
                
            
                    // +ÏÉÅÏÑ∏ Î¶¨Î∑∞ Ï∂îÍ∞Ä Î≤ÑÌäº
                    Button(action: {
                        withAnimation {
                            showReviewField.toggle() // Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥ ÌëúÏãú Ïó¨Î∂Ä ÌÜ†Í∏Ä
                        }
                    }) {
                        Text(showReviewField ? "Î¶¨Î∑∞ Îã´Í∏∞" : "+ÏÉÅÏÑ∏ Î¶¨Î∑∞ Ï∂îÍ∞Ä")
                            .foregroundColor(.blue)
                            .padding()
                    }
                    .sheet(isPresented: $showReviewField) {
                        ReviewTextEditorView(reviewText: $reviewText)// Î™®Îã¨Î°ú ÌëúÏãúÎê† Î∑∞
                    }
            }
            
            
            Spacer()
            
            // Save and Cancel Buttons
            HStack {
                Button("Îì±Î°ù") {
                    let newReview = Review(movieTitle: movieTitle, moviePoster: moviePoster, reviewText: reviewText, rating: rating, watchDate: watchDate, watchLocation: watchLocation, friends: friends, customFields: customFields)
                    modelContext.insert(newReview)
                    movieTitle = ""
                    moviePoster = ""
                    reviewText = ""
                    rating = 1
                    watchDate = Date()
                    watchLocation = ""
                    friends = ""
                    customFields = []
                }
                .frame(maxWidth: .infinity)
                .padding()
                .background(Color.red.opacity(0.7))
                .foregroundColor(.white)
                .cornerRadius(8)
                
                Button("Ï∑®ÏÜå") {
                    movieTitle = ""
                    moviePoster = ""
                    reviewText = ""
                    rating = 1
                    watchDate = Date()
                    watchLocation = ""
                    friends = ""
                    customFields = []
                }
                .frame(maxWidth: .infinity)
                .padding()
                .background(Color.red.opacity(0.7))
                .foregroundColor(.white)
                .cornerRadius(8)
            } //hstack ÎÅùÎÇòÎäî Í≥≥
            .padding(.horizontal)
       // }//scroll view
    } //Î¶¨Î∑∞ Î∞îÎîî ÎÅùÎÇòÎäî Í≥≥
}//Î¶¨Î∑∞ Î∑∞ ÎÅùÎÇòÎäî Í≥≥


#Preview {
    let dummyMovie = Movie(
               title: "Dummy Movie Title",
               director: ["John Doe"],
               releaseYear: "2023",
               poster: nil,
               still: nil,
               genre: ["Drama", "Thriller"],
               keyword: ["Suspense", "Mystery"],
               plotText: "A thrilling tale of suspense and mystery."
           )
    ReviewView(movie: dummyMovie)
}
